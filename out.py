# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2024-05-06T08:42:23+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint


class Model(RootModel[Any]):
    root: Any


class AddrInfo(BaseModel):
    Addrs: List[str]
    ID: str


class Address(RootModel[str]):
    root: str


class ApiDeadlineInfo(RootModel[str]):
    root: str


class ApiDealState(BaseModel):
    LastUpdatedEpoch: int
    SectorStartEpoch: int
    SlashEpoch: int


class ApiState(BaseModel):
    BuiltinActors: Any


class AuthNewParams(BaseModel):
    perms: List[str]
    token_exp: int


class BitFieldLotusJson(RootModel[List[conint(ge=0)]]):
    root: List[conint(ge=0)]


class Bloom(RootModel[str]):
    root: str


class Bytes(RootModel[str]):
    root: str


class EthSyncingResultLotusJson1(BaseModel):
    currentblock: int
    highestblock: int
    startingblock: int


class EthSyncingResultLotusJson(RootModel[Union[bool, EthSyncingResultLotusJson1]]):
    root: Union[bool, EthSyncingResultLotusJson1]


class ExitCode(RootModel[conint(ge=0)]):
    root: conint(ge=0) = Field(
        ...,
        description='`Newtype` wrapper for the FVM `ExitCode`.\n\n# Examples ``` # use forest_filecoin::doctest_private::ExitCode; let fvm2_success = fvm_shared2::error::ExitCode::new(0); let fvm3_success = fvm_shared3::error::ExitCode::new(0);\n\nlet shim_from_v2 = ExitCode::from(fvm2_success); let shim_from_v3 = ExitCode::from(fvm3_success);\n\nassert_eq!(shim_from_v2, shim_from_v3); assert_eq!(shim_from_v2, fvm2_success.into()); assert_eq!(shim_from_v3, fvm3_success.into()); ```',
    )


class GasTrace(BaseModel):
    Name: str
    cg: conint(ge=0)
    sg: conint(ge=0)
    tg: conint(ge=0)
    tt: conint(ge=0)


class Hash(RootModel[str]):
    root: str


class Inner(RootModel[str]):
    root: str


class MinerSectors(BaseModel):
    Active: conint(ge=0)
    Faulty: conint(ge=0)
    Live: conint(ge=0)


class NatStatusResult(BaseModel):
    PublicAddrs: Optional[List[str]] = None
    Reachability: int


class NetInfoResult(BaseModel):
    num_connections: conint(ge=0)
    num_established: conint(ge=0)
    num_peers: conint(ge=0)
    num_pending: conint(ge=0)
    num_pending_incoming: conint(ge=0)
    num_pending_outgoing: conint(ge=0)


class NodeChainStatus(BaseModel):
    blocks_per_tipset_last_100: float
    blocks_per_tipset_last_finality: float


class NodePeerStatus(BaseModel):
    peers_to_publish_blocks: conint(ge=0)
    peers_to_publish_msgs: conint(ge=0)


class NodeSyncStatus(BaseModel):
    behind: conint(ge=0)
    epoch: conint(ge=0)


class Nonce(RootModel[str]):
    root: str


class ShiftingVersion(RootModel[conint(ge=0)]):
    root: conint(ge=0) = Field(
        ...,
        description='Integer based value on version information. Highest order bits for Major, Mid order for Minor and lowest for Patch.',
    )


class SignatureType(Enum):
    Secp256k1 = 'Secp256k1'
    Bls = 'Bls'
    Delegated = 'Delegated'


class String(RootModel[str]):
    root: str


class Uint64(RootModel[str]):
    root: str


class VecU8LotusJson(RootModel[Optional[Inner]]):
    root: Optional[Inner]


class VecU8LotusJson2(RootModel[Optional[Inner]]):
    root: Optional[Inner]


class AllocStringString(RootModel[List[str]]):
    root: List[str]


class ForestFilecoinChainSyncSyncStateLotusJsonSyncStateLotusJson(RootModel[List]):
    root: List


class ForestFilecoinLotusJsonStringifyForestFilecoinShimAddressAddress(
    RootModel[List[String]]
):
    root: List[String]


class ForestFilecoinLotusJsonBlockHeaderBlockHeaderLotusJson(RootModel[List]):
    root: List


class ForestFilecoinLotusJsonPoStProofPoStProofLotusJson(RootModel[List]):
    root: List


class ForestFilecoinLotusJsonSectorInfoSectorInfoLotusJson(RootModel[List]):
    root: List


class ForestFilecoinLotusJsonSignedMessageSignedMessageLotusJson(RootModel[List]):
    root: List


class ForestFilecoinRpcMethodsChainApiMessage(RootModel[List]):
    root: List


class ForestFilecoinRpcMethodsChainApiReceipt(RootModel[List]):
    root: List


class ForestFilecoinRpcTypesApiDeadline(RootModel[List]):
    root: List


class ForestFilecoinRpcTypesMinerPartitions(RootModel[List]):
    root: List


class ForestFilecoinRpcTypesTransaction(RootModel[List]):
    root: List


class Int64(RootModel[int]):
    root: int


class U64(RootModel[List[conint(ge=0)]]):
    root: List[conint(ge=0)]


class BeaconEntryLotusJson(BaseModel):
    Data: VecU8LotusJson2
    Round: conint(ge=0)


class BeaconEntryLotusJson2(BaseModel):
    Data: VecU8LotusJson2
    Round: conint(ge=0)


class BeneficiaryTermLotusJson(BaseModel):
    Expiration: int = Field(
        ...,
        description="The epoch at which the beneficiary's rights expire and revert to the owner",
    )
    Quota: String = Field(
        ...,
        description='The total amount the current beneficiary can withdraw. Monotonic, but reset when beneficiary changes.',
    )
    UsedQuota: String = Field(
        ...,
        description='The amount of quota the current beneficiary has already withdrawn',
    )


class BigInt(RootModel[String]):
    root: String


class CidLotusJsonGenericFor64(BaseModel):
    field_: String = Field(..., alias='/')


class CidLotusJsonGenericFor642(BaseModel):
    field_: String = Field(..., alias='/')


class CirculatingSupply(BaseModel):
    FilBurnt: String
    FilCirculating: String
    FilLocked: String
    FilMined: String
    FilReserveDisbursed: String
    FilVested: String


class ClaimLotusJson(BaseModel):
    QualityAdjPower: String = Field(
        ..., description="Sum of quality adjusted power for a miner's sectors."
    )
    RawBytePower: String = Field(
        ..., description="Sum of raw byte power for a miner's sectors."
    )


class DealCollateralBounds(BaseModel):
    Max: String
    Min: String


class ElectionProofLotusJson(BaseModel):
    VRFProof: VecU8LotusJson2
    WinCount: int


class MarketBalance(BaseModel):
    Escrow: String
    Locked: String


class MessageSendSpec(BaseModel):
    MaxFee: String


class MessageTrace(BaseModel):
    From: String
    GasLimit: Optional[conint(ge=0)] = None
    Method: conint(ge=0)
    Params: VecU8LotusJson2
    ParamsCodec: conint(ge=0)
    ReadOnly: Optional[bool] = None
    To: String
    Value: String


class MinerPowerLotusJson(BaseModel):
    HasMinPower: bool
    MinerPower: ClaimLotusJson
    TotalPower: ClaimLotusJson


class MiningBaseInfo(BaseModel):
    BeaconEntries: BeaconEntryLotusJson
    EligibleForMining: bool
    MinerPower: String
    NetworkPower: String
    PrevBeaconEntry: BeaconEntryLotusJson2
    SectorSize: conint(ge=0)
    Sectors: Optional[ForestFilecoinLotusJsonSectorInfoSectorInfoLotusJson] = None
    WorkerKey: String


class NodeStatusResult(BaseModel):
    chain_status: NodeChainStatus
    peer_status: NodePeerStatus
    sync_status: NodeSyncStatus


class NonEmptyArrayOfCidLotusJsonGenericFor64(
    RootModel[List[CidLotusJsonGenericFor64]]
):
    root: List[CidLotusJsonGenericFor64] = Field(..., min_length=1)


class NullableCidLotusJsonGenericFor64(RootModel[Optional[CidLotusJsonGenericFor64]]):
    root: Optional[CidLotusJsonGenericFor64]


class NullableElectionProofLotusJson(RootModel[Optional[ElectionProofLotusJson]]):
    root: Optional[ElectionProofLotusJson]


class NullableString(RootModel[Optional[String]]):
    root: Optional[String]


class NullableVecU8LotusJson(RootModel[Optional[VecU8LotusJson]]):
    root: Optional[VecU8LotusJson]


class PendingBeneficiaryChangeLotusJson(BaseModel):
    ApprovedByBeneficiary: bool
    ApprovedByNominee: bool
    NewBeneficiary: String
    NewExpiration: int
    NewQuota: String


class PublicVersion(BaseModel):
    APIVersion: ShiftingVersion
    BlockDelay: conint(ge=0)
    Version: str


class RPCSyncState(BaseModel):
    ActiveSyncs: Optional[
        ForestFilecoinChainSyncSyncStateLotusJsonSyncStateLotusJson
    ] = None


class ReceiptLotusJson(BaseModel):
    EventsRoot: Optional[NullableCidLotusJsonGenericFor64] = None
    ExitCode: conint(ge=0)
    GasUsed: conint(ge=0)
    Return: VecU8LotusJson2


class ReceiptLotusJson2(BaseModel):
    EventsRoot: Optional[NullableCidLotusJsonGenericFor64] = None
    ExitCode: conint(ge=0)
    GasUsed: conint(ge=0)
    Return: VecU8LotusJson2


class ReturnTrace(BaseModel):
    ExitCode: ExitCode
    Return: VecU8LotusJson2
    ReturnCodec: conint(ge=0)


class SectorOnChainInfo(BaseModel):
    Activation: int = Field(
        ..., description='Epoch during which the sector proof was accepted'
    )
    DealIDs: Optional[U64] = None
    DealWeight: String = Field(
        ..., description='Integral of active deals over sector lifetime'
    )
    ExpectedDayReward: String = Field(
        ...,
        description='Expected one day projection of reward for sector computed at activation time',
    )
    ExpectedStoragePledge: String = Field(
        ...,
        description='Expected twenty day projection of reward for sector computed at activation time',
    )
    Expiration: int = Field(..., description='Epoch during which the sector expires')
    InitialPledge: String = Field(
        ..., description='Pledge collected to commit this sector'
    )
    ReplacedDayReward: String
    ReplacedSectorAge: int
    SealProof: int = Field(
        ..., description='The seal proof type implies the PoSt proofs'
    )
    SealedCID: CidLotusJsonGenericFor642 = Field(..., description='`CommR`')
    SectorKeyCID: NullableCidLotusJsonGenericFor64
    SectorNumber: conint(ge=0)
    SimpleQAPower: bool
    VerifiedDealWeight: String = Field(
        ..., description='Integral of active verified deals over sector lifetime'
    )


class SectorPreCommitInfo(BaseModel):
    DealIDs: Optional[U64] = None
    Expiration: int
    SealProof: Int64
    SealRandEpoch: int
    SealedCID: CidLotusJsonGenericFor642
    SectorNumber: conint(ge=0)
    UnsealedCid: NullableCidLotusJsonGenericFor64


class SectorPreCommitInfo2(BaseModel):
    DealIDs: Optional[U64] = None
    Expiration: int
    SealProof: Int64
    SealRandEpoch: int
    SealedCID: CidLotusJsonGenericFor642
    SectorNumber: conint(ge=0)
    UnsealedCid: NullableCidLotusJsonGenericFor64


class SectorPreCommitOnChainInfo(BaseModel):
    Info: SectorPreCommitInfo
    PreCommitDeposit: String
    PreCommitEpoch: int


class SignatureTypeLotusJson(RootModel[Union[SignatureType, String]]):
    root: Union[SignatureType, String]


class SignatureTypeLotusJson2(RootModel[Union[SignatureType, String]]):
    root: Union[SignatureType, String]


class TicketLotusJson(BaseModel):
    VRFProof: VecU8LotusJson2


class TipsetLotusJson(BaseModel):
    Blocks: Optional[ForestFilecoinLotusJsonBlockHeaderBlockHeaderLotusJson] = None
    Cids: NonEmptyArrayOfCidLotusJsonGenericFor64
    Height: Int64


class Tx(BaseModel):
    accessList: List[Hash]
    blockHash: Hash
    blockNumber: Uint64
    chainId: Uint64
    from_: Address = Field(..., alias='from')
    gas: Uint64
    hash: Hash
    input: Bytes
    maxFeePerGas: BigInt
    maxPriorityFeePerGas: BigInt
    nonce: Uint64
    r: BigInt
    s: BigInt
    to: Optional[Address] = None
    transactionIndex: Uint64
    type: Uint64
    v: BigInt
    value: BigInt


class ForestFilecoinLotusJsonCidCidLotusJsonGeneric64(
    RootModel[List[CidLotusJsonGenericFor64]]
):
    root: List[CidLotusJsonGenericFor64]


class ActorStateLotusJson(BaseModel):
    Balance: String
    Code: CidLotusJsonGenericFor642
    DelegatedAddress: Optional[NullableString] = None
    Head: CidLotusJsonGenericFor642
    Nonce: conint(ge=0)


class ActorStateLotusJson2(BaseModel):
    Balance: String
    Code: CidLotusJsonGenericFor642
    DelegatedAddress: Optional[NullableString] = None
    Head: CidLotusJsonGenericFor642
    Nonce: conint(ge=0)


class ActorTrace(BaseModel):
    Id: conint(ge=0)
    State: ActorStateLotusJson


class ApiActorState(BaseModel):
    Balance: String
    Code: CidLotusJsonGenericFor642
    State: ApiState


class ApiDealProposal(BaseModel):
    Client: String
    ClientCollateral: String
    EndEpoch: int
    Label: str
    PieceCID: CidLotusJsonGenericFor642
    PieceSize: conint(ge=0)
    Provider: String
    ProviderCollateral: String
    StartEpoch: int
    StoragePricePerEpoch: String
    VerifiedDeal: bool


class ApiMarketDeal(BaseModel):
    Proposal: ApiDealProposal
    State: ApiDealState


class ChainExportParams(BaseModel):
    dry_run: bool
    epoch: int
    output_path: str
    recent_roots: int
    skip_checksum: bool
    tipset_keys: Optional[ForestFilecoinLotusJsonCidCidLotusJsonGeneric64] = None


class ExecutionTrace(BaseModel):
    GasCharges: List[GasTrace]
    InvokedActor: Optional[ActorTrace] = None
    Msg: MessageTrace
    MsgRct: ReturnTrace
    Subcalls: List[ExecutionTrace]


class KeyInfoLotusJson(BaseModel):
    PrivateKey: VecU8LotusJson2
    Type: SignatureTypeLotusJson


class MessageFilter(BaseModel):
    From: NullableString
    To: NullableString


class MessageGasCost(BaseModel):
    BaseFeeBurn: String
    GasUsed: String
    Message: NullableCidLotusJsonGenericFor64
    MinerPenalty: String
    MinerTip: String
    OverEstimationBurn: String
    Refund: String
    TotalCost: String


class MessageLookup(BaseModel):
    Height: int
    Message: CidLotusJsonGenericFor642
    Receipt: ReceiptLotusJson2
    ReturnDec: Any
    TipSet: NonEmptyArrayOfCidLotusJsonGenericFor64


class MessageLotusJson(BaseModel):
    CID: Optional[NullableCidLotusJsonGenericFor64] = None
    From: String
    GasFeeCap: String
    GasLimit: conint(ge=0)
    GasPremium: String
    Method: conint(ge=0)
    Nonce: conint(ge=0)
    Params: Optional[NullableVecU8LotusJson] = None
    To: String
    Value: String
    Version: conint(ge=0)


class MessageLotusJson2(BaseModel):
    CID: Optional[NullableCidLotusJsonGenericFor64] = None
    From: String
    GasFeeCap: String
    GasLimit: conint(ge=0)
    GasPremium: String
    Method: conint(ge=0)
    Nonce: conint(ge=0)
    Params: Optional[NullableVecU8LotusJson] = None
    To: String
    Value: String
    Version: conint(ge=0)


class NullablePendingBeneficiaryChangeLotusJson(
    RootModel[Optional[PendingBeneficiaryChangeLotusJson]]
):
    root: Optional[PendingBeneficiaryChangeLotusJson]


class NullableReceiptLotusJson(RootModel[Optional[ReceiptLotusJson]]):
    root: Optional[ReceiptLotusJson]


class NullableTicketLotusJson(RootModel[Optional[TicketLotusJson]]):
    root: Optional[TicketLotusJson]


class PathChangeForTipsetLotusJson1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    revert: TipsetLotusJson


class PathChangeForTipsetLotusJson2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    apply: TipsetLotusJson


class PathChangeForTipsetLotusJson(
    RootModel[Union[PathChangeForTipsetLotusJson1, PathChangeForTipsetLotusJson2]]
):
    root: Union[PathChangeForTipsetLotusJson1, PathChangeForTipsetLotusJson2]


class SignatureLotusJson(BaseModel):
    Data: VecU8LotusJson2
    Type: SignatureTypeLotusJson


class Transactions(RootModel[Union[List[str], List[Tx]]]):
    root: Union[List[str], List[Tx]]


class ForestFilecoinRpcMethodsChainPathChangeForestFilecoinBlocksTipsetLotusJsonTipsetLotusJson(
    RootModel[List[PathChangeForTipsetLotusJson]]
):
    root: List[PathChangeForTipsetLotusJson]


class ApiInvocResult(BaseModel):
    Duration: conint(ge=0)
    Error: str
    ExecutionTrace: Optional[ExecutionTrace] = None
    GasCost: MessageGasCost
    Msg: MessageLotusJson2
    MsgCid: CidLotusJsonGenericFor642
    MsgRct: NullableReceiptLotusJson


class Block(BaseModel):
    baseFeePerGas: BigInt
    difficulty: Uint64
    extraData: Bytes
    gasLimit: Uint64
    gasUsed: Uint64
    hash: Hash
    logsBloom: Bloom
    miner: Address
    mixHash: Hash
    nonce: Nonce
    number: Uint64
    parentHash: Hash
    receiptsRoot: Hash
    sha3Uncles: Hash
    size: Uint64
    stateRoot: Hash
    timestamp: Uint64
    totalDifficulty: Uint64
    transactions: Transactions
    transactionsRoot: Hash
    uncles: List[Hash]


class BlockMessages(BaseModel):
    BlsMessages: MessageLotusJson
    Cids: Optional[ForestFilecoinLotusJsonCidCidLotusJsonGeneric64] = None
    SecpkMessages: Optional[
        ForestFilecoinLotusJsonSignedMessageSignedMessageLotusJson
    ] = None


class InvocResult(BaseModel):
    Error: Optional[str] = None
    Msg: MessageLotusJson2
    MsgRct: NullableReceiptLotusJson


class MinerInfoLotusJson(BaseModel):
    Beneficiary: String
    BeneficiaryTerm: BeneficiaryTermLotusJson
    ConsensusFaultElapsed: int
    ControlAddresses: Optional[
        ForestFilecoinLotusJsonStringifyForestFilecoinShimAddressAddress
    ] = None
    Multiaddrs: VecU8LotusJson
    NewWorker: NullableString
    Owner: String
    PeerId: NullableString
    PendingBeneficiaryTerm: NullablePendingBeneficiaryChangeLotusJson
    PendingOwnerAddress: NullableString
    SectorSize: conint(ge=0)
    WindowPoStPartitionSectors: conint(ge=0)
    WindowPoStProofType: str
    Worker: String
    WorkerChangeEpoch: int


class NullableSignatureLotusJson(RootModel[Optional[SignatureLotusJson]]):
    root: Optional[SignatureLotusJson]


class BlockHeaderLotusJson(BaseModel):
    BLSAggregate: Optional[NullableSignatureLotusJson] = None
    BeaconEntries: BeaconEntryLotusJson
    BlockSig: Optional[NullableSignatureLotusJson] = None
    ElectionProof: Optional[NullableElectionProofLotusJson] = None
    ForkSignaling: conint(ge=0)
    Height: int
    Messages: CidLotusJsonGenericFor642
    Miner: String
    ParentBaseFee: String
    ParentMessageReceipts: CidLotusJsonGenericFor642
    ParentStateRoot: CidLotusJsonGenericFor642
    ParentWeight: String
    Parents: NonEmptyArrayOfCidLotusJsonGenericFor64
    Ticket: Optional[NullableTicketLotusJson] = None
    Timestamp: conint(ge=0)
    WinPoStProof: Optional[ForestFilecoinLotusJsonPoStProofPoStProofLotusJson] = None


class GossipBlockLotusJson(BaseModel):
    BlsMessages: CidLotusJsonGenericFor642
    Header: BlockHeaderLotusJson
    SecpkMessages: CidLotusJsonGenericFor642


ExecutionTrace.model_rebuild()
