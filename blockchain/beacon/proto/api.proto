/*
 * This protobuf file contains the definition of the public API endpoints as
 * well as messages. All client implementations should use this reference
 * protobuf to implement a compatible drand client.
 */
syntax = "proto3";

package drand;

/*option go_package = "github.com/drand/drand/protobuf/drand";*/
option go_package = "drand";

import "google/api/annotations.proto";
import "common.proto";

service Public {
    // PublicRand is the method that returns the publicly verifiable randomness
    // generated by the drand network.
    rpc PublicRand(PublicRandRequest) returns (PublicRandResponse) {
        option (google.api.http) = {
            get: "/api/public"
            additional_bindings {
                get: "/api/public/{round}"
            }
        };
    }

    rpc PublicRandStream(PublicRandRequest) returns (stream PublicRandResponse) {
        option (google.api.http) = {
            get: "/api/public/stream"
            additional_bindings {
                get: "/api/public/stream/{round}"
            }
        };
    }

    // PrivateRand is the method that returns the private randomness generated
    // by the drand node only.
    rpc PrivateRand(PrivateRandRequest) returns (PrivateRandResponse) {
        option (google.api.http) = {
            post: "/api/private"
            body: "*"
        };
    }

    // Group is the method that returns the group descrition that the drand
    // endpoint belongs to
    rpc Group(drand.GroupRequest) returns (drand.GroupPacket) {
      option (google.api.http) =  {
          get: "/api/info/group"
      };
    }

    // DistKey returns the distributed key from which drand node endpoint get a share
    rpc DistKey(DistKeyRequest) returns (DistKeyResponse) {
      option (google.api.http) = {
        get: "/api/info/distkey"
      };
    }

    // Home is a simple endpoint
    rpc Home(HomeRequest) returns (HomeResponse) {
      option (google.api.http) = {
        get: "/api"
      };
    }

}

// PublicRandRequest requests a public random value that has been generated in a
// unbiasable way and verifiable.
message PublicRandRequest {
    // round uniquely identifies a beacon. If round == 0 (or unspecified), then
    // the response will contain the last.
    uint64 round = 1;
}

// PublicRandResponse holds a signature which is the random value. It can be
// verified thanks to the distributed public key of the nodes that have ran the
// DKG protocol and is unbiasable. The randomness can be verified using the BLS
// verification routine with the message "round || previous_rand".
message PublicRandResponse {
    uint64 round = 1;
    bytes signature = 2;
    bytes previous_signature = 3;
    // randomness is simply there to demonstrate - it is the hash of the
    // signature. It should be computed locally.
    bytes randomness = 4;
}

// PrivateRandRequest is the message to send when requesting a private random
// value.
message PrivateRandRequest {
    // Request must contains a public key towards which to encrypt the private
    // randomness.
    ECIES request = 2;
}

message PrivateRandResponse {
    // Response contains the private randomness encrypted towards the client's
    // request key.
    ECIES response = 1;
}

message ECIES {
    bytes ephemeral = 1;
    bytes ciphertext = 2;
    bytes nonce = 3;
}

// DistKeyRequest requests the distributed public key used during the randomness generation process
message DistKeyRequest {
}

message DistKeyResponse {
    bytes key = 2;
}

message HomeRequest {
}

message HomeResponse {
    string status = 1;
}

// Node represents the information about a drand's node
message Node {
    string address = 1;
    string key = 2; // public key of the node
    bool TLS = 3;
}
