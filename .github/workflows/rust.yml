name: Rust

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  schedule:
    - cron: "0 0 * * *"

env:
  CI: 1
  CARGO_INCREMENTAL: 1
  CACHE_TIMEOUT_MINUTES: 5

jobs:
  test:
    name: Test
    runs-on: buildjet-8vcpu-ubuntu-2004
    timeout-minutes: 30
    env:
      RUSTFLAGS: "-D warnings"
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v3
      - name: Install Dependencies
        run: sudo make install-deps
      - name: install nextest
        uses: taiki-e/install-action@nextest
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          timeout-minutes: ${{ fromJSON(env.CACHE_TIMEOUT_MINUTES) }}
          continue-on-error: true
      - name: Cargo Check
        run: cargo check
      - name: Make Test-All
        run: make test-all

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v3
      - name: Apt Dependencies
        run: sudo make install-deps
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          timeout-minutes: ${{ fromJSON(env.CACHE_TIMEOUT_MINUTES) }}
          continue-on-error: true
      - name: Install taplo (TOML linter)
        run: cargo install taplo-cli --locked
      - name: Run Linters
        run: make lint

  audit:
    name: Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v3
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          timeout-minutes: ${{ fromJSON(env.CACHE_TIMEOUT_MINUTES) }}
          continue-on-error: true
      - name: Install Audit
        run: cargo install cargo-audit
      - name: Run Audit
        run: make audit

  unused_dependencies:
    name: Unused dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v3
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          timeout-minutes: ${{ fromJSON(env.CACHE_TIMEOUT_MINUTES) }}
          continue-on-error: true
      - name: Install udeps
        run: cargo install cargo-udeps --locked
      - name: Run udeps
        run: make udeps

  spellcheck:
    name: Spellcheck
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v3
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          timeout-minutes: ${{ fromJSON(env.CACHE_TIMEOUT_MINUTES) }}
          continue-on-error: true
      - name: Install spellcheck
        run: cargo install cargo-spellcheck
      - name: Run Spellcheck
        run: make spellcheck

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v3
      - uses: visvirial/sccache-action@v1
        if: startsWith(matrix.os, 'Ubuntu')
        with:
          arch: x86_64-unknown-linux-musl
      - uses: visvirial/sccache-action@v1
        if: startsWith(matrix.os, 'macOS')
        with:
          arch: x86_64-apple-darwin
      - name: Install Linux Dependencies
        if: startsWith(matrix.os, 'Ubuntu')
        run: |
          lscpu # the job may run on different CPUs, list cpu here for analysing build time
          sudo make install-deps
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          # Additional non workspace directories, separated by newlines
          cache-directories: |
            ~/.cache/sccache/
          timeout-minutes: ${{ fromJSON(env.CACHE_TIMEOUT_MINUTES) }}
          continue-on-error: true
      - name: Cargo Build
        run: cargo build --profile dev
        env:
          CC: "/tmp/sccache/sccache clang"
          CXX: "/tmp/sccache/sccache clang++"

  calibnet-check:
    name: Calibnet sync check
    runs-on: buildjet-8vcpu-ubuntu-2004
    timeout-minutes: 30
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install Dependencies
        run: sudo make install-deps
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          timeout-minutes: ${{ fromJSON(env.CACHE_TIMEOUT_MINUTES) }}
          continue-on-error: true
      - name: build and install binaries
        run: make install
      - name: download snapshot
        run: forest-cli --chain calibnet chain fetch -s /tmp/snapshots/
      - name: import snapshot and run Forest
        run: |
          forest --chain calibnet --target-peer-count 50 --encrypt-keystore false --halt-after-import --import-snapshot /tmp/snapshots/*.car
          forest --chain calibnet --target-peer-count 50 --encrypt-keystore false --detach
      - name: wait for sync and check health
        run: |
          forest-cli sync wait
          bash scripts/health_check.sh localhost
      - name: kill Forest process, print forest logs
        run: |
          pkill forest
          cat forest.out forest.err
