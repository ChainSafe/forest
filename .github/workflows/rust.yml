name: Rust

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  schedule:
    - cron: "0 0 * * *"

env:
  CI: 1
  CARGO_INCREMENTAL: 1
  CACHE_TIMEOUT_MINUTES: 5
  SNAPSHOT_DIRECTORY: /tmp/snapshots

jobs:
  test:
    name: Test
    runs-on: buildjet-8vcpu-ubuntu-2204
    timeout-minutes: 30
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v3
      - name: Setup sccache
        uses: hanabi1224/sccache-action@v1.2.0
        timeout-minutes: ${{ fromJSON(env.CACHE_TIMEOUT_MINUTES) }}
        continue-on-error: true
        with:
          release-name: v0.3.1
          cache-key: ${{ runner.os }}-sccache-test-${{ hashFiles('rust-toolchain.toml') }}
          cache-update: ${{ github.event_name != 'pull_request' }}
      - name: Apt Dependencies
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: sudo make install-deps
      - name: install nextest
        uses: taiki-e/install-action@nextest
      - run: make test-all
        env:
          CC: "sccache clang"
          CXX: "sccache clang++"

  lint-all:
    name: All lint checks (lint audit spellcheck udeps)
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v3
      - name: Apt Dependencies
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            sudo make install-deps
            sudo apt-get install -y libclang-dev # required dep for cargo-spellcheck
      - uses: hanabi1224/cache-cargo-bin-action@v1.0.0
      - name: Install Lint tools
        run: make install-lint-tools
        env:
          RUSTFLAGS: "-Cstrip=symbols"
      - name: Setup sccache
        uses: hanabi1224/sccache-action@v1.2.0
        timeout-minutes: ${{ fromJSON(env.CACHE_TIMEOUT_MINUTES) }}
        continue-on-error: true
        with:
          release-name: v0.3.1
          cache-key: ${{ runner.os }}-sccache-lints-${{ hashFiles('rust-toolchain.toml') }}
          cache-update: ${{ github.event_name != 'pull_request' }}
      - run: make lint-all
        env:
          CC: "sccache clang"
          CXX: "sccache clang++"

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-latest]
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v3
      - name: Install Protoc (MacOS)
        if: startsWith(matrix.os, 'macOS')
        run: |
          brew install protobuf
          protoc --version
      - name: Setup sccache
        uses: hanabi1224/sccache-action@v1.2.0
        timeout-minutes: ${{ fromJSON(env.CACHE_TIMEOUT_MINUTES) }}
        continue-on-error: true
        with:
          # hard code release-name for macos, it always get rate limited when calling github api
          release-name: v0.3.1
          cache-key: ${{ runner.os }}-sccache-${{ hashFiles('rust-toolchain.toml') }}
          cache-update: ${{ github.event_name != 'pull_request' }}
      - name: Install Apt Dependencies
        if: startsWith(matrix.os, 'Ubuntu')
        run: |
          lscpu # the job may run on different CPUs, list cpu here for analysing build time
          sudo make install-deps
      - name: Cargo Check
        run: cargo check --timings
        env:
          CC: "sccache clang"
          CXX: "sccache clang++"
      - uses: actions/upload-artifact@v3
        with:
          name: build-timings
          path: |
            target/cargo-timings/*
          if-no-files-found: error

  calibnet-check:
    name: Calibnet sync check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Apt Dependencies
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: sudo make install-deps
      - name: Setup sccache
        uses: hanabi1224/sccache-action@v1.2.0
        timeout-minutes: ${{ fromJSON(env.CACHE_TIMEOUT_MINUTES) }}
        continue-on-error: true
        with:
          release-name: v0.3.1
          cache-key: ${{ runner.os }}-sccache-calibnet-check-${{ hashFiles('rust-toolchain.toml') }}
          cache-update: ${{ github.event_name != 'pull_request' }}
      - name: build and install binaries
        run: make install
        env:
          CC: "sccache clang"
          CXX: "sccache clang++"
      - name: fetch params
        run: forest-cli fetch-params --keys
      - name: download snapshot
        run: forest-cli --chain calibnet snapshot fetch --aria2 -s $SNAPSHOT_DIRECTORY
      - name: import snapshot and run Forest
        run: |
          forest --chain calibnet --target-peer-count 50 --encrypt-keystore false --halt-after-import --import-snapshot $SNAPSHOT_DIRECTORY/*.car
          forest-cli --chain calibnet db stats
          forest --chain calibnet --target-peer-count 50 --encrypt-keystore false --detach
      - name: Validate checkpoint tipset hashes
        run: forest-cli chain validate-tipset-checkpoints
      - name: wait for sync and check health
        timeout-minutes: 30
        run: |
          forest-cli sync wait
          forest-cli --chain calibnet db stats
      - name: export snapshot
        run: |
          forest-cli snapshot export
          sha256sum -c *.sha256sum
      - name: print forest logs
        run: |
          wget -O metrics.log http://localhost:6116/metrics
          pkill forest
          echo "--- Forest STDOUT ---"; cat forest.out
          echo "--- Forest STDERR ---"; cat forest.err
          echo "--- Forest Prometheus metrics ---"; cat metrics.log

  dependencies-duplicate-check:
    name: Check cargo files for duplicates
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.0"
      - name: Run duplicate find check
        run: |
          gem install toml-rb --no-document
          ruby scripts/find_duplicate_deps.rb
