name: Build Docker Image

on:
  pull_request:
    branches: [ main ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-image:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:        
      - name: Install Python Dependencies
        run: sudo apt-get update && sudo apt-get install python3-pygit2 python3-toml

      - name: Docker Engine Status
        run: |
          sudo systemctl status docker -l
          
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Listing Directory Contents
        run: |
          echo 'User:' $(whoami) 
          echo 'Working Directory:' $(pwd) 
          echo 'Directory Content:' 
          ls -lah
        
      # Build Container Images
      - name: Build Container Image with Docker
        run: |
          echo "Git: 'CURRENT_COMMIT' serializing ..."
          scripts/serialize_commit.py --debug
          echo "Docker: Image building ..."
          docker build -t forest -f ./Dockerfile .
          echo "Docker: Images listing ..."
          docker image ls
          docker image inspect forest
          echo "Docker: Service 'forest' Version:"
          docker run -i forest forest --version
        
      # Build Container Images
      - name: Start 'forest' Service as Docker Container
        run: |
          work_dir=$(pwd)
          mkdir -p test_dir/{.keys temp} 
          echo -e "test&secret" test_dir/.keys/passphrase.txt          
          echo "Docker: Service 'forest' starting ..."
          con_id=`docker run -e FULLNODE_API_INFO="/ip4/127.0.0.1/tcp/1234/http" -v $work_dir/test_dir/.keys/:/root/.forest/:Z -v $work_dir/test_dir/temp/:/var/tmp/:Z -i forest forest < test_dir/.keys/passphrase.txt`
          echo -e "Docker: Service 'forest' ID:\n$con_id"
          echo "Docker: Service 'forest' Log:"
          docker logs $con_id
          
      # Check Container Health Exit the test when Containers are failed
      - name: Check Container Health
        run: |
          con_stat=`docker ps 2>&1` 
          echo -e "Container Status Complete:\n$con_stat" 
          
      # Check Operativity with the CLI Functionality
      - name: Check Operativity with CLI
        run: |
          con_id=`docker ps | grep -i forest | awk '{print $1}'`
          docker exec -e FULLNODE_API_INFO="/ip4/127.0.0.1/tcp/1234/http" -t $con_id forest auth api-info -p admin < test_dir/.keys/passphrase.txt
