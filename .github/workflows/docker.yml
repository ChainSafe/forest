name: Forest Docker

# Cancel workflow if there is a new change to the branch.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

on:
  push:
    branches: [main]
    tags:
      - "*"
  merge_group:
  pull_request:
    # This needs to be declared explicitly so that the job is actually
    # run when moved out of draft.
    # types: [opened, synchronize, reopened, ready_for_review]

env:
  FOREST_TEST_IMAGE: forest-image
  FOREST_TEST_ARCHIVE: forest-image.tar

jobs:
  build-and-push-docker-image:
    # Run the job only if the PR is not a draft.
    # This is done to limit the runner cost.
    # if: github.event.pull_request.draft == false
    name: Build images and push to GHCR
    # Change to `buildjet-8vcpu-ubuntu-2204` if `fuzzy` is down.
    # runs-on: fuzzy
    runs-on: buildjet-8vcpu-ubuntu-2204
    timeout-minutes: 30
    steps:
      - name: List cached docker images
        run: docker image ls

      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Github Packages
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        continue-on-error: true
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build the fat image first, for details see <https://github.com/ChainSafe/forest/pull/3912>
      # This step yields the following labels
      # - {date}-{sha}-fat, e.g. 2023-01-19-da4692d-fat,
      # - edge-fat
      # - tag-fat (if pushed).
      - name: Docker Meta fat
        id: metafat
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/chainsafe/forest
          flavor: |
            latest=false
            suffix=-fat
          tags: |
            type=raw,value={{date 'YYYY-MM-DD'}}-{{sha}}
            type=ref,event=tag
            type=edge
      
      - name: Build fat image and push to GitHub Container Registry
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{ steps.metafat.outputs.tags }}
          labels: ${{ steps.metafat.outputs.labels }}
          push: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') }}
          # Compile Docker image only for AMD64 for a regular PR to save some CI time.
          platforms: ${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) && 'linux/amd64,linux/arm64' || 'linux/amd64' }}
          target: fat-image
          load: true

      # Listing Docker images makes only sense if the `load` option is set to `true` in the `build-push-action`.
      - name: List docker images
        run: docker image ls

      - name: Export image to tar and upload to GitHub
        run: |
          docker save -o ${{ env.FOREST_TEST_ARCHIVE }} ghcr.io/chainsafe/forest:$DOCKER_METADATA_OUTPUT_VERSION

      # This image will be used by another job running tests on the image. Potentially, this could be omitted
      # by doing the tests in the same job, but the worker cost would be higher (we use a paid buildjet for this).
      # Additionally, more tests could be added in the future, and run in parallel.
      - name: Upload image to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FOREST_TEST_IMAGE }}
          path: ${{ env.FOREST_TEST_ARCHIVE }}

      # This step yields the following labels
      # - date+sha, e.g. 2023-01-19-da4692d,
      # - tag (if pushed).
      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/chainsafe/forest
          flavor: |
            latest=false
          tags: |
            type=raw,value={{date 'YYYY-MM-DD'}}-{{sha}}
            type=ref,event=tag
            type=edge

      - name: Build slim image and push to GitHub Container Registry
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') }}
          # Compile Docker image only for AMD64 for a regular PR to save some CI time.
          platforms: ${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) && 'linux/amd64,linux/arm64' || 'linux/amd64' }}
          target: slim-image

  # Run the RPC API tests. Ideally, this should be a separate workflow, but due to the
  # current limitations of GitHub Actions, we have to run it in the same workflow where the
  # Docker image is built.
  #
  # Warning: This job must be run on an x86_64 machine, as the tests are not compatible with ARM.
  # This is the case at the time of writing (`ubuntu-latest` will always be x86_64), but it may change in the future.
  api-tests:
    name: RPC API Tests
    # if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    needs:
      - build-and-push-docker-image
    timeout-minutes: 30
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v4
      - name: Download Forest image artefacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.FOREST_TEST_IMAGE }}
      - name: Load Forest image
        run: |
          docker load -i ${{ env.FOREST_TEST_ARCHIVE }}
      - name: Run RPC API Tests
        run: |
          # Replace the image tag in the .env file with the one we've just built.
          TAG=$(docker image ls | grep forest | awk '{print $2}')
          sed -i "s/\(FOREST_IMAGE=.*\):.*/\1:$TAG/" ./scripts/tests/api_compare/.env
          ./scripts/tests/api_compare/setup.sh
          ./scripts/tests/api_compare/api_compare.sh
      - name: Dump docker logs
        if: always()
        uses: jwalton/gh-docker-logs@v2
