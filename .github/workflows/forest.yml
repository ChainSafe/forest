name: Integration tests
concurrency:
  group: '${{ github.workflow }}-${{ github.ref }}'
  cancel-in-progress: '${{ github.ref != ''refs/heads/main'' }}'
'on': push
env:
  CI: 1
  CARGO_INCREMENTAL: 0
  CACHE_TIMEOUT_MINUTES: 5
  SCRIPT_TIMEOUT_MINUTES: 30
  AWS_ACCESS_KEY_ID: '${{ secrets.AWS_ACCESS_KEY_ID }}'
  AWS_SECRET_ACCESS_KEY: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
  RUSTC_WRAPPER: sccache
  CC: sccache clang
  CXX: sccache clang++
  FIL_PROOFS_PARAMETER_CACHE: /var/tmp/filecoin-proof-parameters
  SHELL_IMAGE: busybox
jobs:
  build-ubuntu:
    name: Build Ubuntu
    runs-on: ubuntu-24.04
    steps:
      - name: Configure SCCache variables
        run: |
          # External PRs do not have access to 'vars' or 'secrets'.
          if [[ "${{secrets.AWS_ACCESS_KEY_ID}}" != "" ]]; then
            echo "SCCACHE_ENDPOINT=${{ vars.SCCACHE_ENDPOINT}}" >> $GITHUB_ENV
            echo "SCCACHE_BUCKET=${{ vars.SCCACHE_BUCKET}}" >> $GITHUB_ENV
            echo "SCCACHE_REGION=${{ vars.SCCACHE_REGION}}" >> $GITHUB_ENV
          fi
      - run: lscpu
      - name: Show IP
        run: curl ifconfig.me
        continue-on-error: true
      - name: Checkout Sources
        uses: actions/checkout@v4
      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.6
        timeout-minutes: '${{ fromJSON(env.CACHE_TIMEOUT_MINUTES) }}'
        continue-on-error: true
      - uses: actions/setup-go@v5
        with:
          go-version-file: "go.work"
      - name: Cargo Install
        env:
          # To minimize compile times: https://nnethercote.github.io/perf-book/build-configuration.html#minimizing-compile-times
          RUSTFLAGS: "-C linker=clang -C link-arg=-fuse-ld=lld"
        run: make install-slim-quick
      - uses: actions/upload-artifact@v4
        with:
          name: 'forest-${{ runner.os }}'
          path: |
            ~/.cargo/bin/forest*
          if-no-files-found: error
  local-devnet-check:
    name: Devnet checks
    runs-on: ubuntu-24.04
    needs:
      - build-ubuntu
    env:
      # We use a custom Dockerfile for CI to speed up the build process.
      FOREST_DOCKERFILE_OVERRIDE: scripts/devnet/forest_ci.dockerfile
    steps:
      - uses: actions/cache@v4
        id: cache
        with:
          path: '${{ env.FIL_PROOFS_PARAMETER_CACHE }}'
          key: proof-params-2k
      - name: Load cache into volume
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          docker volume create devnet_filecoin-proofs
          docker run --rm \
            -v devnet_filecoin-proofs:/proofs \
            -v $FIL_PROOFS_PARAMETER_CACHE:/cache \
            $SHELL_IMAGE \
            sh -c "cp /cache/* /proofs"
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: 'forest-${{ runner.os }}'
      - name: Devnet setup
        run: ./scripts/devnet/setup.sh
        timeout-minutes: '${{ fromJSON(env.SCRIPT_TIMEOUT_MINUTES) }}'
      - name: Devnet check
        run: ./scripts/devnet/check.sh
        timeout-minutes: '${{ fromJSON(env.SCRIPT_TIMEOUT_MINUTES) }}'
      - name: Dump docker logs
        if: always()
        uses: jwalton/gh-docker-logs@v2
      - name: Prepare cache folder for uploading
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          docker run --rm \
            -v devnet_filecoin-proofs:/proofs \
            -v $FIL_PROOFS_PARAMETER_CACHE:/cache \
            $SHELL_IMAGE \
            sh -c "cp /proofs/* /cache"
          sudo chmod -R 755 $FIL_PROOFS_PARAMETER_CACHE
