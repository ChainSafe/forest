# Docker compose file to run Forest bootstrap tests.

services:
  init: 
    build:
      context: ../../../.
      dockerfile: ${FOREST_DOCKERFILE_OVERRIDE:-Dockerfile}
    volumes:
      - node-data:/data
      - filecoin-proofs:${FIL_PROOFS_PARAMETER_CACHE}
    networks:
      - bootstrap-tests
    environment:
      - FIL_PROOFS_PARAMETER_CACHE=${FIL_PROOFS_PARAMETER_CACHE}
    entrypoint: [ "/bin/bash", "-c" ]
    user: 0:0
    command:
      - |
        set -euxo pipefail
        # fetch parameter files
        forest-tool fetch-params --keys
        # if there are some files in the data directory, then we don't need to fetch the snapshot
        if [ "$$(ls -A /data/*.car.zst)" ]; then
          echo "Snapshot already fetched"
        else
          forest-tool snapshot fetch --chain ${CHAIN} -d /data
        fi
  forest-bootstrapper:
    depends_on:
      init:
        condition: service_completed_successfully
    build:
      context: ../../../.
      dockerfile: ${FOREST_DOCKERFILE_OVERRIDE:-Dockerfile}
    volumes:
      - node-data:/data
      - filecoin-proofs:${FIL_PROOFS_PARAMETER_CACHE}
    networks:
      - bootstrap-tests
    environment:
      - FIL_PROOFS_PARAMETER_CACHE=${FIL_PROOFS_PARAMETER_CACHE}
      - FULLNODE_API_INFO=/dns/forest/tcp/${FOREST_RPC_PORT}/http
    entrypoint: [ "/bin/bash", "-c" ]
    user: 0:0
    command:
      - |
        set -euxo pipefail
        # Import the P2P keypair
        mkdir -p /root/.local/share/forest/libp2p
        echo ${FOREST_PEER_KEYPAIR} | base64 --decode  > /root/.local/share/forest/libp2p/keypair

        forest --chain ${CHAIN} --encrypt-keystore false --no-gc \
          --p2p-listen-address /ip4/0.0.0.0/tcp/$FOREST_P2P_PORT \
          --stateless 
  lotus:
    depends_on:
      init:
        condition: service_completed_successfully
    image: ${LOTUS_IMAGE}
    volumes:
      - node-data:/data
      - lotus-data:/var/lib/lotus
      - filecoin-proofs:${FIL_PROOFS_PARAMETER_CACHE}
    networks:
      - bootstrap-tests
    environment:
      - FIL_PROOFS_PARAMETER_CACHE=${FIL_PROOFS_PARAMETER_CACHE}
      - LOTUS_API_LISTENADDRESS=/ip4/0.0.0.0/tcp/${LOTUS_RPC_PORT}/http
      - FULLNODE_API_INFO=/dns/lotus/tcp/${LOTUS_RPC_PORT}/http
      - LOTUS_P2P_BOOTSTRAPPERS=${FOREST_BOOTSTRAPPER_ADDRESS}
      - LOTUS_P2P_DHT_NO_ROUTING_TABLE_FILTER=1
    entrypoint: [ "/bin/bash", "-c" ]
    command:
      - |
        set -euxo pipefail
        lotus daemon --remove-existing-chain --import-snapshot $(ls /data/*.car.zst | tail -n 1)
  lotus-peers-wait:
    depends_on:
      lotus:
        condition: service_started
    image: ${LOTUS_IMAGE}
    volumes:
      - node-data:/data
      - lotus-data:/var/lib/lotus
      - filecoin-proofs:${FIL_PROOFS_PARAMETER_CACHE}
    networks:
      - bootstrap-tests
    environment:
      - FULLNODE_API_INFO=/dns/lotus/tcp/${LOTUS_RPC_PORT}/http
    entrypoint: [ "/bin/bash", "-c" ]
    command:
      - |
        set -euxo pipefail
        lotus wait-api --timeout 10m
        lotus sync wait
        # At this point, lotus node is synced and it should have multiple peers. Assert the latter.
        if [ $$(lotus net peers | wc -l) -lt 2 ]; then
          echo "Lotus node should have at least 2 peers"
          exit 1
        fi
        echo "Lotus properly bootstrapped"
  post-setup:
    depends_on:
      lotus-peers-wait:
        condition: service_completed_successfully
    image: busybox
    networks:
      - bootstrap-tests
    entrypoint: [ "/bin/sh", "-c" ]
    command:
      - |
        set -euxo pipefail
        echo "Success"

volumes:
  filecoin-proofs:
  node-data:
  # mount this to /var/lib/lotus to avoid creating random volumes
  lotus-data:

networks:
  bootstrap-tests:
