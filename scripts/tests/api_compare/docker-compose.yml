# Docker compose file to run Forest and Lotus API tests.
version: "3.8"

services:
  forest:
    build:
      context: ../../../.
      dockerfile: ${FOREST_DOCKERFILE_OVERRIDE:-Dockerfile}
    volumes:
      - node-data:/data
      - filecoin-proofs:${FIL_PROOFS_PARAMETER_CACHE}
    networks:
      - api-tests
    environment:
      - FIL_PROOFS_PARAMETER_CACHE=${FIL_PROOFS_PARAMETER_CACHE}
      - FULLNODE_API_INFO=/dns/forest/tcp/${FOREST_RPC_PORT}/http
    entrypoint: [ "/bin/bash", "-c" ]
    command:
      - |
        set -euxo pipefail
        # Setup data_dir to avoid downloading snapshot on every local run
        echo "[client]" > config.toml
        echo "data_dir = \"/data/forest\"" >> config.toml
        forest --config config.toml --chain ${CHAIN} --encrypt-keystore false --no-gc --height=-900 --auto-download-snapshot --rpc-address 0.0.0.0:${FOREST_RPC_PORT}
    healthcheck:
      test: [ "CMD", "forest-cli", "chain", "head" ]
      interval: 15s
      timeout: 3s
      retries: 3
      start_period: 30s
  snapshot-export:
    depends_on:
      forest:
        condition: service_healthy
    build:
      context: ../../../.
      dockerfile: ${FOREST_DOCKERFILE_OVERRIDE:-Dockerfile}
    networks:
      - api-tests
    volumes:
      - node-data:/data
      - filecoin-proofs:/proofs
    env_file:
      - .env
    environment:
      - FULLNODE_API_INFO=/dns/forest/tcp/${FOREST_RPC_PORT}/http
    entrypoint: [ "/bin/bash", "-c" ]
    command:
      - |
        set -euxo pipefail
        forest-cli sync wait
        forest-cli snapshot export -o "$SNAPSHOT_PATH" -d=900 --include-message-receipts
  api-serve:
    depends_on:
      snapshot-export:
        condition: service_completed_successfully
    build:
      context: ../../../.
      dockerfile: ${FOREST_DOCKERFILE_OVERRIDE:-Dockerfile}
    volumes:
      - node-data:/data
      - filecoin-proofs:${FIL_PROOFS_PARAMETER_CACHE}
    networks:
      - api-tests
    environment:
      - FIL_PROOFS_PARAMETER_CACHE=${FIL_PROOFS_PARAMETER_CACHE}
    entrypoint: [ "/bin/bash", "-c" ]
    command:
      - |
        set -euxo pipefail
        forest-tool api serve "$SNAPSHOT_PATH" \
          --chain calibnet --port ${FOREST_OFFLINE_RPC_PORT}
  lotus:
    depends_on:
      snapshot-export:
        condition: service_completed_successfully
    image: ${LOTUS_IMAGE}
    volumes:
      - node-data:/data
      - lotus-data:/var/lib/lotus
      - filecoin-proofs:${FIL_PROOFS_PARAMETER_CACHE}
    networks:
      - api-tests
    environment:
      - FIL_PROOFS_PARAMETER_CACHE=${FIL_PROOFS_PARAMETER_CACHE}
      - LOTUS_API_LISTENADDRESS=/ip4/0.0.0.0/tcp/${LOTUS_RPC_PORT}/http
      - LOTUS_FEVM_ENABLEETHRPC=1
      - LOTUS_CHAINSTORE_ENABLESPLITSTORE=false
      - FULLNODE_API_INFO=/dns/lotus/tcp/${LOTUS_RPC_PORT}/http
    entrypoint: [ "/bin/bash", "-c" ]
    command:
      - |
        set -euxo pipefail
        lotus daemon --import-snapshot "$SNAPSHOT_PATH" --remove-existing-chain
  lotus-sync-wait:
    depends_on:
      lotus:
        condition: service_started
    image: ${LOTUS_IMAGE}
    volumes:
      - node-data:/data
      - lotus-data:/var/lib/lotus
      - filecoin-proofs:${FIL_PROOFS_PARAMETER_CACHE}
    networks:
      - api-tests
    environment:
      - FULLNODE_API_INFO=/dns/lotus/tcp/${LOTUS_RPC_PORT}/http
    entrypoint: [ "/bin/bash", "-c" ]
    command:
      - |
        set -euxo pipefail
        until lotus sync wait; do
            sleep 5
        done
  api-compare:
    depends_on:
      lotus-sync-wait:
        condition: service_completed_successfully
    build:
      context: ../../../.
      dockerfile: ${FOREST_DOCKERFILE_OVERRIDE:-Dockerfile}
    volumes:
      - node-data:/data
      - filecoin-proofs:${FIL_PROOFS_PARAMETER_CACHE}
      - ./filter-list:/data/filter-list
    networks:
      - api-tests
    entrypoint: [ "/bin/bash", "-c" ]
    command:
      - |
        set -euxo pipefail
        forest-tool api compare "$SNAPSHOT_PATH" \
          --forest "/dns/forest/tcp/$FOREST_RPC_PORT/http" \
          --lotus "/dns/lotus/tcp/$LOTUS_RPC_PORT/http" \
          --n-tipsets 5 \
          --filter-file /data/filter-list
  api-compare-offline:
    depends_on:
      lotus-sync-wait:
        condition: service_completed_successfully
    build:
      context: ../../../.
      dockerfile: ${FOREST_DOCKERFILE_OVERRIDE:-Dockerfile}
    volumes:
      - node-data:/data
      - filecoin-proofs:${FIL_PROOFS_PARAMETER_CACHE}
      - ./filter-list:/data/filter-list
    networks:
      - api-tests
    entrypoint: [ "/bin/bash", "-c" ]
    command:
      - |
        set -euxo pipefail
        forest-tool api compare "$SNAPSHOT_PATH" \
          --forest "/dns/api-serve/tcp/$FOREST_OFFLINE_RPC_PORT/http" \
          --lotus "/dns/lotus/tcp/$LOTUS_RPC_PORT/http" \
          --n-tipsets 5 \
          --filter-file /data/filter-list || true # Fixme
  post-setup:
    depends_on:
      api-compare:
        required: true
        condition: service_completed_successfully
      api-compare-offline:
        required: true
        condition: service_completed_successfully
    image: ${LOTUS_IMAGE}
    volumes:
      - node-data:/data
      - lotus-data:/var/lib/lotus
      - filecoin-proofs:${FIL_PROOFS_PARAMETER_CACHE}
    networks:
      - api-tests
    entrypoint: [ "/bin/bash", "-c" ]
    command:
      - |
        set -euxo pipefail
        echo "Success"

volumes:
  filecoin-proofs:
  node-data:
  # mount this to /var/lib/lotus to avoid creating random volumes
  lotus-data:

networks:
  api-tests:
