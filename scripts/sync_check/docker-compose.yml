# Docker compose file to run continuous Forest sync on both mainnet and calibnet.

version: "3.7"

services:
  # Forest mainnet instance
  forest_mainnet:
    image: ghcr.io/chainsafe/forest:${FOREST_TAG}
    hostname: forest-mainnet
    container_name: forest-mainnet
    networks:
      - mainnet
    volumes:
      - type: volume
        source: forest_data
        target: ${FOREST_TARGET_DATA}
      - type: bind
        read_only: true
        source: ./sync_check.toml
        target: ${FOREST_TARGET_DATA}/sync_check.toml
      # Uncomment on the first-run to bootstrap the db.
      # - type: bind
      #   read_only: true
      #   source: ${FOREST_HOST_MAINNET_SNAPSHOT_PATH}
      #   target: "${FOREST_TARGET_SNAPSHOTS}/mainnet.car"
    command:
      # Uncomment on the first-run to boostrap the db.
      # - '--import-snapshot'
      # - ${FOREST_TARGET_SNAPSHOTS}/mainnet.car
      - '--chain'
      - 'mainnet'
      - '--config'
      - ${FOREST_TARGET_DATA}/sync_check.toml
    restart: unless-stopped
    labels:
      com.centurylinklabs.watchtower.enable: true
  forest_calibnet:
    image: ghcr.io/chainsafe/forest:${FOREST_TAG}
    hostname: forest-calibnet
    container_name: forest-calibnet
    networks:
      - calibnet
    volumes:
      - type: volume
        source: forest_data
        target: ${FOREST_TARGET_DATA}
      - type: bind
        read_only: true
        source: ./sync_check.toml
        target: ${FOREST_TARGET_DATA}/sync_check.toml
      # Uncomment on the first-run to bootstrap the db.
      # - type: bind
      #   read_only: true
      #   source: ${FOREST_HOST_CALIBNET_SNAPSHOT_PATH}
      #   target: ${FOREST_TARGET_SNAPSHOTS}/calibnet.car
    command:
      # Uncomment on the first-run to boostrap the db.
      # - '--import-snapshot'
      # - ${FOREST_TARGET_SNAPSHOTS}/calibnet.car
      - '--chain'
      - 'calibnet'
      - '--config'
      - ${FOREST_TARGET_DATA}/sync_check.toml
    restart: unless-stopped
    labels:
      com.centurylinklabs.watchtower.enable: true
  # Probe container to validate Forest syncing. Needs to be on the same network.
  forest_tester:
    build:
      context: .
      dockerfile: Dockerfile-tester
    networks:
      - mainnet
      - calibnet
    volumes:
      - type: bind
        read_only: true
        source: .
        target: ${FOREST_TARGET_SCRIPTS}
      # Put common Ruby utils into a path that should be by default in Ruby PATH
      - type: bind
        read_only: true
        source: ../ruby_common
        target: /usr/local/share/ruby/site_ruby/cs_utils
      - type: bind
        source: ${FOREST_HOST_LOGS}
        target: ${FOREST_TARGET_LOGS}
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - LOG_DIR=${FOREST_TARGET_LOGS}
      - SCRIPTS_DIR=${FOREST_TARGET_SCRIPTS}
      - SLACK_API_TOKEN=${FOREST_SLACK_API_TOKEN}
      - SLACK_NOTIF_CHANNEL=${FOREST_SLACK_NOTIF_CHANNEL}
    entrypoint: [ "/bin/bash", "-c" ]
    command:
      - |
        ruby ${FOREST_TARGET_SCRIPTS}/sync_check.rb forest-mainnet &
        ruby ${FOREST_TARGET_SCRIPTS}/sync_check.rb forest-calibnet &
        sleep infinity
    depends_on:
      - forest_mainnet
      - forest_calibnet
    labels:
      com.centurylinklabs.watchtower.enable: true
      com.centurylinklabs.watchtower.depends-on: "forest-mainnet,forest-calibnet"
  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /root/.docker/config.json:/config.json
    command: --label-enable --interval 30
    restart: unless-stopped

volumes:
  forest_data: {}

networks:
  mainnet:
  calibnet:

