version: 2.1

parameters:
  msrv-version:
    type: string
    default: "1.52.1"

executors:
  linux-executor:
    machine:
      image: ubuntu-2004:202107-02
    resource_class: xlarge
  macos-executor:
    macos:
      xcode: 13.0.0
    resource_class: xlarge

################################################################################
#  Reusable single command definitions
################################################################################
commands:
  install_rust_linux:
    description: Install Rust Toolchain on Linux
    steps:
      - run:
          name: Install Rust Toolchain on Linux
          command: |
            curl -O https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-gnu/rustup-init
            chmod +x rustup-init
            ./rustup-init -y --no-modify-path --default-toolchain stable
            rm rustup-init
            echo 'export PATH=$HOME/.cargo/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV
            rustup show
            rustc --version
            cargo --version
  install_rust_macos:
    description: Install Rust Toolchain on MacOS
    steps:
      - run:
          name: Install Rust Toolchain on MacOS
          command: |
            curl https://sh.rustup.rs -sSf -o install_rust_linux.sh
            chmod +x install_rust_linux.sh
            ./install_rust_linux.sh -q -y
            rm install_rust_linux.sh
            export PATH="${HOME}/.cargo/bin:${PATH}"
            rustup show
            rustc -V
  set_rustc_stable:
    description: Set rustc version to stable
    steps:
      - run:
          name: Set rustc stable
          command: |
            rustup default stable
            rustup update stable
            rustup show
  set_rustc_nightly:
    description: Set rustc version to nightly
    steps:
      - run:
          name: Set rustc nightly
          command: |
            rustup default nightly
            rustup update nightly
            rustup show
  print_versions:
    description: Version Info
    steps:
      - run:
          name: Version Info
          command: |
            rustc --version
            cargo --version
            rustup --version
  env_setup:
    description: Environment Setup
    steps:
      - run:
          name: Setup Env
          command: |
            echo 'export TAG=0.1.${CIRCLE_BUILD_NUM}' >> $BASH_ENV
            echo 'export IMAGE_NAME=forest' >> $BASH_ENV
            echo 'export CARGO_INCREMENTAL=0' >> $BASH_ENV
            echo 'export CI_TIMEOUT="timeout 40m"' >> $BASH_ENV
            echo 'export CC=gcc' >> $BASH_ENV
            echo 'export FIL_PROOFS_PARAMETER_CACHE=$HOME/.proof-params' >> $BASH_ENV
  install_deps:
    steps:
      - run:
          name: Install Dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y \
                curl file gcc g++ git make openssh-client \
                autoconf automake cmake libtool libcurl4-openssl-dev libssl-dev llvm\
                libelf-dev libdw-dev binutils-dev zlib1g-dev libiberty-dev wget \
                xz-utils pkg-config python libclang-6.0-dev clang ocl-icd-opencl-dev libgflags-dev libhwloc-dev
            rustup component add clippy rustfmt
            git submodule update --init
  save_cargo_package_cache:
    description: Save cargo package cache for subsequent jobs
    steps:
      - save_cache:
          key: cargo-package-cache-{{ checksum "Cargo.lock" }}
          paths:
            - ../.cargo/git
            - ../.cargo/registry
            - ../.cargo/.package-cache
  restore_cargo_package_cache:
    description: Restore Cargo package cache from prev job
    steps:
      - run:
          name: Print dir
          command: |
            ls -all /usr/local/include
      - restore_cache:
          key: cargo-package-cache-{{ checksum "Cargo.lock" }}
      - run:
          name: Check cargo package cache
          command: |
            ls -all $HOME/.cargo
            du -ssh $HOME/.cargo
  build_setup:
    description: Sets up environment for future jobs
    steps:
      - checkout
      - install_rust_linux
      - set_rustc_stable
      - print_versions
      - env_setup
      - install_deps

jobs:
  prefetch-crates:
    executor: linux-executor
    description: Prefetch cargo crates for subsequent jobs.
    steps:
      - build_setup
      - restore_cargo_package_cache
      - run:
          name: Fetch workspace dependencies over network
          command: cargo fetch
      - save_cargo_package_cache

################################################################################
#  Build related jobs
################################################################################
  linux-build-msrv:
    executor: linux-executor
    description: Check linux build on MSRV
    steps:
      - checkout
      - install_rust_linux
      - install_deps
      - env_setup
      - run:
          name: Set MSRV
          command: |
            rustup toolchain install << pipeline.parameters.msrv-version >>
      - run:
          name: Linux build MSRV
          command: |
            rustup run << pipeline.parameters.msrv-version >> rustc --version --verbose
            rustup run << pipeline.parameters.msrv-version >> cargo --version --verbose
            cargo +<< pipeline.parameters.msrv-version >> check -p forest
            cargo +<< pipeline.parameters.msrv-version >> check
  linux-build-stable:
    executor: linux-executor
    description: Check linux build on stable
    steps:
      - checkout
      - install_rust_linux
      - install_deps
      - env_setup
      - set_rustc_stable
      - run:
          name: Linux build stable
          command: |
            rustup run stable rustc --version --verbose
            rustup run stable cargo --version --verbose
            cargo +stable check -p forest
            cargo +stable check
  linux-build-nightly:
    executor: linux-executor
    description: Check Linux build on nightly
    steps:
      - checkout
      - install_rust_linux
      - install_deps
      - env_setup
      - set_rustc_nightly
      - run:
          name: Linux build nightly
          command: |
            rustup run nightly rustc --version --verbose
            rustup run nightly cargo --version --verbose
            cargo +nightly check -p forest
            cargo +nightly check
  macos-build-stable:
    executor: macos-executor
    description: Check MacOS build on stable
    steps:
      - checkout
      - install_rust_macos
      - set_rustc_stable
      - env_setup
      - run:
          name: Install deps
          command: |
            brew install hwloc
      - run:
          name: MacOS build stable
          command: |
            rustup run stable rustc --version --verbose
            rustup run stable cargo --version --verbose
            cargo +stable check -p forest
            cargo +stable check
  install:
    executor: linux-executor
    description: Install forest binary
    steps:
      - build_setup
      - restore_cargo_package_cache
      - run:
          name: Install binary
          command: make install

################################################################################
#  Testing, linting and doc publishing
################################################################################
  lint:
    executor: linux-executor
    description: Run Rust linting tools.
    steps:
      - build_setup
      - restore_cargo_package_cache
      - run:
          name: Check license
          command: make license
      - run:
          name: cargo clippy
          command: cargo clippy -- -D warnings -A clippy::upper_case_acronyms -A clippy::needless_collect -A clippy::enum_variant_names -A clippy::needless_borrow
      - run:
          name: cargo fmt
          command: cargo fmt --all -- --check
  test:
    executor: linux-executor
    description: Run Rust tests
    steps:
      - build_setup
      - restore_cargo_package_cache
      - run:
          name: Run Unit Tests
          command: make test
  test-vectors:
    executor: linux-executor
    description: Run serialization and conformance tests
    steps:
      - build_setup
      - restore_cargo_package_cache
      - run:
          name: Run test vectors
          command: make run-vectors
  publish-docs:
    executor: linux-executor
    description: Publish documentation to GitHub pages
    steps:
      - checkout
      - when:
          condition:
            equal: [main, << pipeline.git.branch >>]
          steps:
            - build_setup
            - restore_cargo_package_cache
            - run:
                name: Build Docs
                command: cargo doc --no-deps
            - run:
                name: Publish Docs
                command: bash ./scripts/build-rust-docs.sh

################################################################################
#  Security audit
################################################################################
  security:
    executor: linux-executor
    description: Cargo audit
    steps:
      - build_setup
      - restore_cargo_package_cache
      - run:
          name: Install dependency auditing tool
          command: cargo install cargo-audit
      - run:
          name: Check for known security issues in dependencies
          command: cargo audit

workflows:
  test-checks:
    jobs:
      - prefetch-crates
      - lint:
          requires:
            - prefetch-crates
      - test:
          requires:
            - prefetch-crates
      - test-vectors:
          requires:
            - prefetch-crates
  build-checks:
    jobs:
      - prefetch-crates
      - linux-build-msrv:
          requires:
            - prefetch-crates
      - linux-build-stable:
          requires:
            - prefetch-crates
      - linux-build-nightly:
          requires:
            - prefetch-crates
      - macos-build-stable:
          requires:
            - prefetch-crates
  nightly-checks:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - prefetch-crates
      - install:
          requires:
            - prefetch-crates
  docs:
    jobs:
      - publish-docs:
          filters:
            branches:
              only:
                - main
  security:
    jobs:
      - prefetch-crates
      - security:
          requires:
            - prefetch-crates
